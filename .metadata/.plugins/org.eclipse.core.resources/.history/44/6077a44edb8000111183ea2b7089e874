package test.Konami;

import javax.xml.parsers.*;
import org.xml.sax.InputSource;
import org.w3c.dom.*;
import java.io.*;


public class XmlReceived {
	private String xml;
	private String xmlName = "A";
	private String xmlAddress = "B";
	private String xmlCommand = "C";
	public GUIServer gui;
	
	
public XmlReceived (String Xml, GUIServer gui){
	this.xml = Xml;
	this.gui = gui;
	
	}

public static String getCharacterDataFromElement(Element e) {
	Node child = e.getFirstChild();
		if (child instanceof CharacterData) {
		       			CharacterData cd = (CharacterData) child;
		    return cd.getData();
		    }
		    return "?";
}

public void process(){
	 
		    try {
		        DocumentBuilderFactory dbf =
		            DocumentBuilderFactory.newInstance();
		        DocumentBuilder db = dbf.newDocumentBuilder();
		        InputSource is = new InputSource();
		        is.setCharacterStream(new StringReader(xml));

		        Document doc = db.parse(is);
		        NodeList nodes = doc.getElementsByTagName("employee");

		        // iterate the employees
		        for (int i = 0; i < nodes.getLength(); i++) {
		           Element element = (Element) nodes.item(i);

		           NodeList name = element.getElementsByTagName("name");
		           Element line = (Element) name.item(0);
		           System.out.println("Name: " + getCharacterDataFromElement(line));
		           
		           
		           NodeList title = element.getElementsByTagName("title");
		           line = (Element) title.item(0);
		           System.out.println("Title: " + getCharacterDataFromElement(line));
		        }
		    }
		    catch (Exception e) {
		        gui.getGridExtra1().setText("Error in XML parse");		    
		    }
		    
		    /*
		    output :
		        Name: John
		        Title: Manager
		        Name: Sara
		        Title: Clerk
		    */ 
	}
	public String updateNameGrid(){
		return xmlName;
		
	}
	public String updateAddressGrid(){
		return xmlAddress;
		
	}
	public String updateCommandGrid(){
		return xmlCommand;
		
	}

}
