package test.Konami;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

@SuppressWarnings("serial")
public class GUIServer extends JFrame implements ActionListener {
	
	private JButton 	startButton;
	private JButton 	stopButton;
	private JPanel 		jpNorth;
	private JPanel 		jpCenter;
	private JPanel 		jpSouth;
	private JTextField	ipField;
	private JTextField	portField;
	private JLabel		ipFieldLabel;
	private JLabel		portFieldLabel;
	private int 		serverPortNumber;
	private GridLayout	xmlLayout;
	private JTextField 	gridName;
	private JTextField 	gridAddress;
	private JTextField 	gridCommand;
	private JTextField 	gridExtra1;
	private JTextField 	gridExtra2;
	private JTextField 	gridExtra3;
	
	private boolean		controlVar;
	
	public SocketLis SL = null;
	
	
	
public GUIServer(String titleName){
	
	this.setTitle(titleName);}


public int getServerPortNumber() {
	return serverPortNumber;
}

public void setServerPortNumber(int serverPortNumber) {
	this.serverPortNumber = serverPortNumber;
}

public void go(){
	
	//configuring buttons and adding them to JFrame.
	
	//north layout
	startButton 	= new JButton("Start Server");
	stopButton 		= new JButton("Stop Server");
	
	jpNorth 		= new JPanel();
	jpNorth.setBackground(Color.WHITE);
	
	
	stopButton.setVisible(false);
	jpNorth.add(startButton, BorderLayout.WEST);
	jpNorth.add(stopButton, BorderLayout.EAST);
	
	//center layout , making fields for the grid.
	
	
	gridName 	= new JTextField("Name");  
	gridAddress = new JTextField("Address"); 	
	gridCommand = new JTextField("Command"); 	
	gridExtra1	= new JTextField(); 	
	gridExtra2	= new JTextField(); 	
	gridExtra3 	= new JTextField();
	
	xmlLayout 	= new GridLayout(2, 3);
	jpCenter 	= new JPanel(xmlLayout);
	
	gridName.setEditable(false);  
	gridAddress.setEditable(false);  	
	gridCommand.setEditable(false);  	
	gridExtra1.setEditable(false);  	
	gridExtra2.setEditable(false); 	
	gridExtra3.setEditable(false); 
	
	gridName.setBackground(Color.LIGHT_GRAY);
	gridAddress.setBackground(Color.LIGHT_GRAY); 	
	gridCommand.setBackground(Color.LIGHT_GRAY);	
	gridExtra1.setBackground(Color.LIGHT_GRAY);	
	gridExtra2.setBackground(Color.LIGHT_GRAY);	
	gridExtra3.setBackground(Color.LIGHT_GRAY);
	
	
	
	jpCenter.add(gridName);
	jpCenter.add(gridAddress);
	jpCenter.add(gridCommand);
	jpCenter.add(gridExtra1);
	jpCenter.add(gridExtra2);
	jpCenter.add(gridExtra3);
	
	this.add(jpCenter, BorderLayout.CENTER);
	
	//south layout
	ipField 		= new JTextField(20);
	portField 		= new JTextField(20);
	ipFieldLabel 	= new JLabel("IP Address: ");		
	portFieldLabel 	= new JLabel("Port Number: ");		
	jpSouth 		= new JPanel();
	
	jpSouth.add(ipFieldLabel, BorderLayout.WEST);
	jpSouth.add(ipField, BorderLayout.WEST);
	
	//sets the Field to static so it cannot be modified.
	ipField.setEditable(false);
	jpSouth.add(portFieldLabel, BorderLayout.EAST);
	jpSouth.add(portField, BorderLayout.EAST);
	
	jpSouth.setBackground(Color.WHITE);
	
	
	
	this.add(jpNorth, BorderLayout.NORTH);
	this.add(jpSouth, BorderLayout.SOUTH);
	
	
	//adding action Listeners.
	
	startButton.addActionListener(this);
	stopButton.addActionListener(this);
	portField.addActionListener(this);
	
	
	
	//define for main JFrame Object.
	
	this.setSize(900, 400);
	this.setBackground(Color.BLACK);
	this.setResizable(false);
	this.setVisible(true);
	this.setDefaultCloseOperation(EXIT_ON_CLOSE);
}
	
public void getIp(){
	
	byte[] ipAddr = null;
	
	try {
	    InetAddress addr = InetAddress.getLocalHost();

	    // Get IP Address
	    
	     ipAddr = addr.getAddress();
	    
	} catch (UnknownHostException e) { }
	
	ipField.setText(ipAddr[0]+"."+ipAddr[1]+"."+ipAddr[2]+"."+ipAddr[3]);
}

public void allAction(){
	
	this.getIp();
	
	if (portField.getText().isEmpty()){
		gridExtra3.setText("Error: please provide a value port number");
		return;}
	
			try	{
				serverPortNumber = Integer.parseInt(portField.getText());}

			catch (NumberFormatException e){
				
				e.printStackTrace();
				gridExtra3.setText("Error: please provide a value port number");
				return;}
	
	gridExtra3.setText(portField.getText());
	SocketLis SL = new SocketLis();
	SL.listen(this);
	gridName.setText(SL.getReadIn());
	controlVar = true;
	
}

public void stop(){
	
	this.portField.setText(null);
	this.gridExtra3.setText(null);
	this.gridName.setText(null);
	stopButton.setVisible(false);
	startButton.setVisible(true);
	try {
		SL.close();
	} catch (IOException e) {
		
		//e.printStackTrace();
		return;
	}
}
	

	@Override
	public void actionPerformed(ActionEvent e) {
	
		if (e.getSource() == startButton){
			
			this.allAction();
			if(controlVar){
					startButton.setVisible(false);
					stopButton.setVisible(true);
					controlVar = false; }
			
			}
		else if (e.getSource() == stopButton){
			
			this.stop();
			
			
			}
		else if (e.getSource() == portField){
			
			this.allAction();
			}
		
	}

}
